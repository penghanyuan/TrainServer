<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="bit.dao.OrderMapper" >
    <resultMap id="BaseResultMap" type="bit.model.Order" >
        <id column="order_id" property="orderId" jdbcType="INTEGER" />
        <result column="order_num" property="orderNum" jdbcType="INTEGER" />
        <result column="order_status" property="orderStatus" jdbcType="INTEGER" />
        <result column="order_type" property="orderType" jdbcType="INTEGER" />
        <result column="order_server" property="orderServer" jdbcType="INTEGER" />
        <result column="order_ctime" property="orderCtime" jdbcType="TIMESTAMP" />
        <result column="order_rtime" property="orderRtime" jdbcType="TIMESTAMP" />
        <result column="order_ftime" property="orderFtime" jdbcType="TIMESTAMP" />
        <result column="order_money" property="orderMoney" jdbcType="REAL" />
        <result column="order_client" property="orderClient" jdbcType="INTEGER" />
        <result column="order_trip" property="orderTrip" jdbcType="INTEGER" />
    </resultMap>
    <sql id="Base_Column_List" >
        order_id, order_num, order_status, order_type, order_server, order_ctime, order_rtime,
        order_ftime, order_money, order_client, order_trip
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from torder
        where order_id = #{orderId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from torder
        where order_id = #{orderId,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="bit.model.Order" >
        insert into torder (order_id, order_num, order_status,
        order_type, order_server, order_ctime,
        order_rtime, order_ftime, order_money,
        order_client, order_trip)
        values (#{orderId,jdbcType=INTEGER}, #{orderNum,jdbcType=INTEGER}, #{orderStatus,jdbcType=INTEGER},
        #{orderType,jdbcType=INTEGER}, #{orderServer,jdbcType=INTEGER}, #{orderCtime,jdbcType=TIMESTAMP},
        #{orderRtime,jdbcType=TIMESTAMP}, #{orderFtime,jdbcType=TIMESTAMP}, #{orderMoney,jdbcType=REAL},
        #{orderClient,jdbcType=INTEGER}, #{orderTrip,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="bit.model.Order" >
        insert into torder
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="orderId != null" >
                order_id,
            </if>
            <if test="orderNum != null" >
                order_num,
            </if>
            <if test="orderStatus != null" >
                order_status,
            </if>
            <if test="orderType != null" >
                order_type,
            </if>
            <if test="orderServer != null" >
                order_server,
            </if>
            <if test="orderCtime != null" >
                order_ctime,
            </if>
            <if test="orderRtime != null" >
                order_rtime,
            </if>
            <if test="orderFtime != null" >
                order_ftime,
            </if>
            <if test="orderMoney != null" >
                order_money,
            </if>
            <if test="orderClient != null" >
                order_client,
            </if>
            <if test="orderTrip != null" >
                order_trip,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="orderId != null" >
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="orderNum != null" >
                #{orderNum,jdbcType=INTEGER},
            </if>
            <if test="orderStatus != null" >
                #{orderStatus,jdbcType=INTEGER},
            </if>
            <if test="orderType != null" >
                #{orderType,jdbcType=INTEGER},
            </if>
            <if test="orderServer != null" >
                #{orderServer,jdbcType=INTEGER},
            </if>
            <if test="orderCtime != null" >
                #{orderCtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderRtime != null" >
                #{orderRtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderFtime != null" >
                #{orderFtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderMoney != null" >
                #{orderMoney,jdbcType=REAL},
            </if>
            <if test="orderClient != null" >
                #{orderClient,jdbcType=INTEGER},
            </if>
            <if test="orderTrip != null" >
                #{orderTrip,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="bit.model.Order" >
        update torder
        <set >
            <if test="orderNum != null" >
                order_num = #{orderNum,jdbcType=INTEGER},
            </if>
            <if test="orderStatus != null" >
                order_status = #{orderStatus,jdbcType=INTEGER},
            </if>
            <if test="orderType != null" >
                order_type = #{orderType,jdbcType=INTEGER},
            </if>
            <if test="orderServer != null" >
                order_server = #{orderServer,jdbcType=INTEGER},
            </if>
            <if test="orderCtime != null" >
                order_ctime = #{orderCtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderRtime != null" >
                order_rtime = #{orderRtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderFtime != null" >
                order_ftime = #{orderFtime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderMoney != null" >
                order_money = #{orderMoney,jdbcType=REAL},
            </if>
            <if test="orderClient != null" >
                order_client = #{orderClient,jdbcType=INTEGER},
            </if>
            <if test="orderTrip != null" >
                order_trip = #{orderTrip,jdbcType=INTEGER},
            </if>
        </set>
        where order_id = #{orderId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="bit.model.Order" >
    update torder
    set order_num = #{orderNum,jdbcType=INTEGER},
      order_status = #{orderStatus,jdbcType=INTEGER},
      order_type = #{orderType,jdbcType=INTEGER},
      order_server = #{orderServer,jdbcType=INTEGER},
      order_ctime = #{orderCtime,jdbcType=TIMESTAMP},
      order_rtime = #{orderRtime,jdbcType=TIMESTAMP},
      order_ftime = #{orderFtime,jdbcType=TIMESTAMP},
      order_money = #{orderMoney,jdbcType=REAL},
      order_client = #{orderClient,jdbcType=INTEGER},
      order_trip = #{orderTrip,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>

    <resultMap type="bit.model.Order" id="CommentResultMap" extends="BaseResultMap">
        <collection property="comments" javaType="list" ofType="bit.model.Comment">
            <id column="comm_id" property="commId" jdbcType="INTEGER" />
            <result column="comm_star" property="commStar" jdbcType="INTEGER" />
            <result column="comm_context" property="commContext" jdbcType="VARCHAR" />
            <result column="comm_client" property="commClient" jdbcType="INTEGER" />
            <result column="comm_server" property="commServer" jdbcType="INTEGER" />
            <result column="comm_datetime" property="commDatetime" jdbcType="TIMESTAMP" />
            <result column="comm_status" property="commStatus" jdbcType="INTEGER" />
        </collection>
    </resultMap>
    <select id="selectCommentbyOrderId" resultMap="CommentResultMap" parameterType="java.lang.Integer" >
SELECT `torder`.order_id,
	`torder`.order_num,
	`torder`.order_status,
	`torder`.order_type,
	`torder`.order_server,
	`torder`.order_ctime,
	`torder`.order_rtime,
	`torder`.order_ftime,
	`torder`.order_money,
	`torder`.order_client,
	`torder`.order_trip,
	`comment`.comm_id,
	`comment`.comm_star,
	`comment`.comm_context,
	`comment`.comm_client,
	`comment`.comm_server,
	`comment`.comm_datetime,
	`comment`.comm_status,
	`comment`.comm_orderid
FROM `torder` INNER JOIN `comment` ON `torder`.order_id = `comment`.comm_orderid
    where order_id = #{orderid,jdbcType=INTEGER}
  </select>

    <resultMap type="bit.model.Order" id="TrainResultMap" extends="BaseResultMap">
        <association property="train" column="order_trip" javaType="bit.model.Train">
            <id column="train_id" property="trainId" jdbcType="INTEGER" />
            <result column="train_num" property="trainNum" jdbcType="VARCHAR" />
            <result column="train_date" property="trainDate" jdbcType="DATE" />
            <result column="train_carriage" property="trainCarriage" jdbcType="VARCHAR" />
            <result column="train_from" property="trainFrom" jdbcType="INTEGER" />
            <result column="train_to" property="trainTo" jdbcType="INTEGER" />
            <result column="train_client" property="trainClient" jdbcType="INTEGER" />
        </association>
    </resultMap>

    <select id="selectTrainbyOrderId" resultMap="TrainResultMap" parameterType="java.lang.Integer" >
        SELECT `torder`.order_id,
        `torder`.order_num,
        `torder`.order_status,
        `torder`.order_type,
        `torder`.order_server,
        `torder`.order_ctime,
        `torder`.order_rtime,
        `torder`.order_ftime,
        `torder`.order_money,
        `torder`.order_client,
        `torder`.order_trip,
        train.train_id,
        train.train_num,
        train.train_date,
        train.train_carriage,
        train.train_from,
        train.train_to,
        train.train_client
        FROM `torder` INNER JOIN train ON `torder`.order_trip = train.train_id
        where order_id = #{orderid,jdbcType=INTEGER}
    </select>

    <resultMap type="bit.model.Order" id="ClientResultMap" extends="BaseResultMap">
        <association property="client" column="order_client" javaType="bit.model.Client">
            <id column="client_id" property="clientId" jdbcType="INTEGER" />
            <result column="client_name" property="clientName" jdbcType="VARCHAR" />
            <result column="client_tel" property="clientTel" jdbcType="VARCHAR" />
            <result column="client_username" property="clientUsername" jdbcType="VARCHAR" />
            <result column="client_status" property="clientStatus" jdbcType="INTEGER" />
        </association>
    </resultMap>

    <select id="selectClientbyOrderId" resultMap="ClientResultMap" parameterType="java.lang.Integer" >
        SELECT `torder`.order_id,
        `torder`.order_client,
        client.client_id,
        client.client_name,
        client.client_tel,
        client.client_username,
        client.client_status
        FROM `torder` INNER JOIN client ON `torder`.order_client = client.client_id
        where order_id = #{orderid,jdbcType=INTEGER}
    </select>

    <resultMap type="bit.model.Order" id="ServerResultMap" extends="BaseResultMap">
        <association property="server" column="order_server" javaType="bit.model.Server">
            <id column="server_id" property="serverId" jdbcType="INTEGER" />
            <result column="server_name" property="serverName" jdbcType="VARCHAR" />
            <result column="server_tel" property="serverTel" jdbcType="VARCHAR" />
            <result column="server_pid" property="serverPid" jdbcType="VARCHAR" />
            <result column="server_num" property="serverNum" jdbcType="VARCHAR" />
            <result column="server_password" property="serverPassword" jdbcType="VARCHAR" />
            <result column="server_code" property="serverCode" jdbcType="VARCHAR" />
            <result column="server_point" property="serverPoint" jdbcType="REAL" />
            <result column="server_photo" property="serverPhoto" jdbcType="VARCHAR" />
            <result column="server_station" property="serverStation" jdbcType="INTEGER" />
        </association>
    </resultMap>

    <select id="selectServerbyOrderId" resultMap="ServerResultMap" parameterType="java.lang.Integer" >
        SELECT `torder`.order_server,
        `torder`.order_id,
        `server`.server_id,
        `server`.server_name,
        `server`.server_tel,
        `server`.server_num,
        `server`.server_code,
        `server`.server_point,
        `server`.server_photo,
        `server`.server_station
        FROM `torder` INNER JOIN `server` ON `torder`.order_server = `server`.server_id
        where order_id = #{orderid,jdbcType=INTEGER}
    </select>

    <select id="selectOrderbyStatus" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
   SELECT *,
	`torder`.order_id,
	`torder`.order_num,
	`torder`.order_status,
	`torder`.order_type,
	`torder`.order_server,
	`torder`.order_ctime,
	`torder`.order_rtime,
	`torder`.order_ftime,
	`torder`.order_money,
	`torder`.order_client,
	`torder`.order_trip
    FROM `torder`
    where order_status = #{status,jdbcType=INTEGER}
  </select>
    <select id="selectOrderbyClientId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        SELECT *,
        `torder`.order_id,
        `torder`.order_num,
        `torder`.order_status,
        `torder`.order_type,
        `torder`.order_server,
        `torder`.order_ctime,
        `torder`.order_rtime,
        `torder`.order_ftime,
        `torder`.order_money,
        `torder`.order_client,
        `torder`.order_trip
        FROM `torder`
        where order_client = #{cilentid,jdbcType=INTEGER}
    </select>
    <select id="selectOrderbyServerId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        SELECT *,
        `torder`.order_id,
        `torder`.order_num,
        `torder`.order_status,
        `torder`.order_type,
        `torder`.order_server,
        `torder`.order_ctime,
        `torder`.order_rtime,
        `torder`.order_ftime,
        `torder`.order_money,
        `torder`.order_client,
        `torder`.order_trip
        FROM `torder`
        where order_server = #{serverid,jdbcType=INTEGER}
    </select>
</mapper>